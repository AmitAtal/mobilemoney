name: MobileMoney Build and Deployment Workflow
on: [push]
jobs:
  unit-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Code
        uses: actions/checkout@v2

      - name: Install Node Modules
        run: npm install

      - name: Run the Test Case
        run: npm test

  code-coverage:
    runs-on: ubuntu-latest
    needs: unit-testing
    steps:
      - name: Checkout the Code
        uses: actions/checkout@v2

      - name: Install Node Modules
        run: npm install

      - name: Run the code Coverage
        run: npm test -- --coverage
        env:
          CI: true
      
      - name: Upload the Test Coverage Results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-files
          path: coverage    

  build:
    runs-on: ubuntu-latest
    needs: code-coverage
    steps:
      - name: Checkout the Code
        uses: actions/checkout@v2

      - name: Install Node Modules
        run: npm install

      - name: Run the Build
        run: npm run build 
      
      - name: Upload the Test Coverage Results
        uses: actions/upload-artifact@v2
        with:
          name: build-files
          path: build
        if: always()       


  functonaltesting:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Functional Testing
        run: echo "Functional Testing"


  oast-retire:
    runs-on: ubuntu-latest
    needs: functonaltesting
    steps:
      - name: Clone the Repository
        uses: actions/checkout@v2

      - name: Install Retire.JS
        run: npm install -g retire

      - name: Install Node Modules
        run: npm install

      - name: run Retire.JS Scan
        run: | 
          retire --outputformat json --outputpath retire-output.json
        continue-on-error: true

      - name: Upload the Retire.JS Output file
        uses: actions/upload-artifact@v2
        with:
          name: RetireJS-Output-File
          path: retire-output.json
        if: always()

  oast-safety:
    runs-on: ubuntu-latest
    needs: functonaltesting
    steps:
      - name: Clone the Repository
        uses: actions/checkout@v2

      - name: Install Safety
        run: pip install safety

      - name: run Safety Scan
        run: safety check -r requirements.txt --json -o safety-output.json
        continue-on-error: true
      
      - name: Upload the Safety Output file
        uses: actions/upload-artifact@v2
        with:
          name: Safety-Output-file
          path: safety-output.json
        if: always()

  oast-npmscan:
    runs-on: ubuntu-latest
    needs: functonaltesting
    steps:
      - name: Clone the Repository
        uses: actions/checkout@v2

      - name: Install Node Modules
        run: npm install

      - name: run npm Audit
        run: npm audit --json | tee npmaudit-output.json
        continue-on-error: true
      
      - name: Upload the Safety Output file
        uses: actions/upload-artifact@v2
        with:
          name: NPMAudit-Output-file
          path: npmaudit-output.json
        if: always()

  sast-trufflehog:
    runs-on: ubuntu-latest
    needs: functonaltesting
    steps:
      - name: Clone the Repository
        uses: actions/checkout@v2

      - name: Install trufflehog
        run: pip install trufflehog3

      - name: run trufflehog scan
        run: trufflehog3 --no-history --format json --output trufflehog-output.json
        continue-on-error: true
      
      - name: Upload the Safety Output file
        uses: actions/upload-artifact@v2
        with:
          name: trufflehog-Output-file
          path: trufflehog-output.json
        if: always()

  deployment:
    runs-on: ubuntu-latest
    needs: [oast-retire, oast-safety, oast-npmscan , sast-trufflehog]
    steps:
      - name: Checkout the Code
        uses: actions/checkout@v2

      - name: Install Surge
        run: npm install -g surge
   
      - name: Download the Build Folder from Previous Stage
        uses: actions/download-artifact@v2
        with:
          name: build-files

      - name: Debugging Verify the Path
        run: ls -R

      - name: Push the files to Surge Server
        run: surge ./ ${{ secrets.SURGE_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}
  
  nmap-scan:
    runs-on: ubuntu-latest
    needs: deployment
    steps:
      - name: Updated Packages
        run: sudo apt-get update
      
      - name: Install Nmap
        run: sudo apt-get install nmap -y

      - name: Scan the Domain
        run: nmap ${{ secrets.SURGE_DOMAIN }} -oX nmap-output.xml

      - name: Upload the Scan Report
        uses: actions/upload-artifact@v2
        with:
          name: nmap-results
          path: nmap-output.xml
        if: always()        

  nikto-scan:
    runs-on: ubuntu-latest
    needs: deployment
    steps:
      - name: Updated Packages
        run: sudo apt-get update
      
      - name: Install Nikto
        run: sudo apt-get install nikto -y

      - name: Scan the Domain
        run: nikto -o nikto-output.html -Format html -h ${{ secrets.SURGE_DOMAIN }}

      - name: Upload the Scan Report
        uses: actions/upload-artifact@v2
        with:
          name: nikto-results
          path: nikto-output.html
        if: always()                